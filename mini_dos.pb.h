// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mini_dos.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_mini_5fdos_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_mini_5fdos_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_mini_5fdos_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_mini_5fdos_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mini_5fdos_2eproto;
namespace dos {
class Operation;
class OperationDefaultTypeInternal;
extern OperationDefaultTypeInternal _Operation_default_instance_;
class Operation_DistributeTask;
class Operation_DistributeTaskDefaultTypeInternal;
extern Operation_DistributeTaskDefaultTypeInternal _Operation_DistributeTask_default_instance_;
class Operation_Result;
class Operation_ResultDefaultTypeInternal;
extern Operation_ResultDefaultTypeInternal _Operation_Result_default_instance_;
}  // namespace dos
PROTOBUF_NAMESPACE_OPEN
template<> ::dos::Operation* Arena::CreateMaybeMessage<::dos::Operation>(Arena*);
template<> ::dos::Operation_DistributeTask* Arena::CreateMaybeMessage<::dos::Operation_DistributeTask>(Arena*);
template<> ::dos::Operation_Result* Arena::CreateMaybeMessage<::dos::Operation_Result>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace dos {

enum Operation_OperationType : int {
  Operation_OperationType_QUERY = 0,
  Operation_OperationType_REGISTER = 1,
  Operation_OperationType_DISTRIBUTE = 2,
  Operation_OperationType_RETURN = 3,
  Operation_OperationType_FINISH = 4,
  Operation_OperationType_COMPUTE = 5
};
bool Operation_OperationType_IsValid(int value);
constexpr Operation_OperationType Operation_OperationType_OperationType_MIN = Operation_OperationType_QUERY;
constexpr Operation_OperationType Operation_OperationType_OperationType_MAX = Operation_OperationType_COMPUTE;
constexpr int Operation_OperationType_OperationType_ARRAYSIZE = Operation_OperationType_OperationType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Operation_OperationType_descriptor();
template<typename T>
inline const std::string& Operation_OperationType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Operation_OperationType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Operation_OperationType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Operation_OperationType_descriptor(), enum_t_value);
}
inline bool Operation_OperationType_Parse(
    const std::string& name, Operation_OperationType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Operation_OperationType>(
    Operation_OperationType_descriptor(), name, value);
}
// ===================================================================

class Operation_DistributeTask :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dos.Operation.DistributeTask) */ {
 public:
  Operation_DistributeTask();
  virtual ~Operation_DistributeTask();

  Operation_DistributeTask(const Operation_DistributeTask& from);
  Operation_DistributeTask(Operation_DistributeTask&& from) noexcept
    : Operation_DistributeTask() {
    *this = ::std::move(from);
  }

  inline Operation_DistributeTask& operator=(const Operation_DistributeTask& from) {
    CopyFrom(from);
    return *this;
  }
  inline Operation_DistributeTask& operator=(Operation_DistributeTask&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Operation_DistributeTask& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Operation_DistributeTask* internal_default_instance() {
    return reinterpret_cast<const Operation_DistributeTask*>(
               &_Operation_DistributeTask_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Operation_DistributeTask& a, Operation_DistributeTask& b) {
    a.Swap(&b);
  }
  inline void Swap(Operation_DistributeTask* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Operation_DistributeTask* New() const final {
    return CreateMaybeMessage<Operation_DistributeTask>(nullptr);
  }

  Operation_DistributeTask* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Operation_DistributeTask>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Operation_DistributeTask& from);
  void MergeFrom(const Operation_DistributeTask& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Operation_DistributeTask* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dos.Operation.DistributeTask";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mini_5fdos_2eproto);
    return ::descriptor_table_mini_5fdos_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOperationNumTypeFieldNumber = 1,
    kOperationNumOneFieldNumber = 2,
    kOperationNumTwoFieldNumber = 3,
    kOperationLabelFieldNumber = 4,
  };
  // required string operation_num_type = 1;
  bool has_operation_num_type() const;
  private:
  bool _internal_has_operation_num_type() const;
  public:
  void clear_operation_num_type();
  const std::string& operation_num_type() const;
  void set_operation_num_type(const std::string& value);
  void set_operation_num_type(std::string&& value);
  void set_operation_num_type(const char* value);
  void set_operation_num_type(const char* value, size_t size);
  std::string* mutable_operation_num_type();
  std::string* release_operation_num_type();
  void set_allocated_operation_num_type(std::string* operation_num_type);
  private:
  const std::string& _internal_operation_num_type() const;
  void _internal_set_operation_num_type(const std::string& value);
  std::string* _internal_mutable_operation_num_type();
  public:

  // required string operation_num_one = 2;
  bool has_operation_num_one() const;
  private:
  bool _internal_has_operation_num_one() const;
  public:
  void clear_operation_num_one();
  const std::string& operation_num_one() const;
  void set_operation_num_one(const std::string& value);
  void set_operation_num_one(std::string&& value);
  void set_operation_num_one(const char* value);
  void set_operation_num_one(const char* value, size_t size);
  std::string* mutable_operation_num_one();
  std::string* release_operation_num_one();
  void set_allocated_operation_num_one(std::string* operation_num_one);
  private:
  const std::string& _internal_operation_num_one() const;
  void _internal_set_operation_num_one(const std::string& value);
  std::string* _internal_mutable_operation_num_one();
  public:

  // required string operation_num_two = 3;
  bool has_operation_num_two() const;
  private:
  bool _internal_has_operation_num_two() const;
  public:
  void clear_operation_num_two();
  const std::string& operation_num_two() const;
  void set_operation_num_two(const std::string& value);
  void set_operation_num_two(std::string&& value);
  void set_operation_num_two(const char* value);
  void set_operation_num_two(const char* value, size_t size);
  std::string* mutable_operation_num_two();
  std::string* release_operation_num_two();
  void set_allocated_operation_num_two(std::string* operation_num_two);
  private:
  const std::string& _internal_operation_num_two() const;
  void _internal_set_operation_num_two(const std::string& value);
  std::string* _internal_mutable_operation_num_two();
  public:

  // required string operation_label = 4;
  bool has_operation_label() const;
  private:
  bool _internal_has_operation_label() const;
  public:
  void clear_operation_label();
  const std::string& operation_label() const;
  void set_operation_label(const std::string& value);
  void set_operation_label(std::string&& value);
  void set_operation_label(const char* value);
  void set_operation_label(const char* value, size_t size);
  std::string* mutable_operation_label();
  std::string* release_operation_label();
  void set_allocated_operation_label(std::string* operation_label);
  private:
  const std::string& _internal_operation_label() const;
  void _internal_set_operation_label(const std::string& value);
  std::string* _internal_mutable_operation_label();
  public:

  // @@protoc_insertion_point(class_scope:dos.Operation.DistributeTask)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr operation_num_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr operation_num_one_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr operation_num_two_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr operation_label_;
  friend struct ::TableStruct_mini_5fdos_2eproto;
};
// -------------------------------------------------------------------

class Operation_Result :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dos.Operation.Result) */ {
 public:
  Operation_Result();
  virtual ~Operation_Result();

  Operation_Result(const Operation_Result& from);
  Operation_Result(Operation_Result&& from) noexcept
    : Operation_Result() {
    *this = ::std::move(from);
  }

  inline Operation_Result& operator=(const Operation_Result& from) {
    CopyFrom(from);
    return *this;
  }
  inline Operation_Result& operator=(Operation_Result&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Operation_Result& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Operation_Result* internal_default_instance() {
    return reinterpret_cast<const Operation_Result*>(
               &_Operation_Result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Operation_Result& a, Operation_Result& b) {
    a.Swap(&b);
  }
  inline void Swap(Operation_Result* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Operation_Result* New() const final {
    return CreateMaybeMessage<Operation_Result>(nullptr);
  }

  Operation_Result* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Operation_Result>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Operation_Result& from);
  void MergeFrom(const Operation_Result& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Operation_Result* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dos.Operation.Result";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mini_5fdos_2eproto);
    return ::descriptor_table_mini_5fdos_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultTypeFieldNumber = 1,
    kResultValueFieldNumber = 2,
  };
  // required string result_type = 1;
  bool has_result_type() const;
  private:
  bool _internal_has_result_type() const;
  public:
  void clear_result_type();
  const std::string& result_type() const;
  void set_result_type(const std::string& value);
  void set_result_type(std::string&& value);
  void set_result_type(const char* value);
  void set_result_type(const char* value, size_t size);
  std::string* mutable_result_type();
  std::string* release_result_type();
  void set_allocated_result_type(std::string* result_type);
  private:
  const std::string& _internal_result_type() const;
  void _internal_set_result_type(const std::string& value);
  std::string* _internal_mutable_result_type();
  public:

  // required string result_value = 2;
  bool has_result_value() const;
  private:
  bool _internal_has_result_value() const;
  public:
  void clear_result_value();
  const std::string& result_value() const;
  void set_result_value(const std::string& value);
  void set_result_value(std::string&& value);
  void set_result_value(const char* value);
  void set_result_value(const char* value, size_t size);
  std::string* mutable_result_value();
  std::string* release_result_value();
  void set_allocated_result_value(std::string* result_value);
  private:
  const std::string& _internal_result_value() const;
  void _internal_set_result_value(const std::string& value);
  std::string* _internal_mutable_result_value();
  public:

  // @@protoc_insertion_point(class_scope:dos.Operation.Result)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_value_;
  friend struct ::TableStruct_mini_5fdos_2eproto;
};
// -------------------------------------------------------------------

class Operation :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dos.Operation) */ {
 public:
  Operation();
  virtual ~Operation();

  Operation(const Operation& from);
  Operation(Operation&& from) noexcept
    : Operation() {
    *this = ::std::move(from);
  }

  inline Operation& operator=(const Operation& from) {
    CopyFrom(from);
    return *this;
  }
  inline Operation& operator=(Operation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Operation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Operation* internal_default_instance() {
    return reinterpret_cast<const Operation*>(
               &_Operation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Operation& a, Operation& b) {
    a.Swap(&b);
  }
  inline void Swap(Operation* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Operation* New() const final {
    return CreateMaybeMessage<Operation>(nullptr);
  }

  Operation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Operation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Operation& from);
  void MergeFrom(const Operation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Operation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dos.Operation";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mini_5fdos_2eproto);
    return ::descriptor_table_mini_5fdos_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Operation_DistributeTask DistributeTask;
  typedef Operation_Result Result;

  typedef Operation_OperationType OperationType;
  static constexpr OperationType QUERY =
    Operation_OperationType_QUERY;
  static constexpr OperationType REGISTER =
    Operation_OperationType_REGISTER;
  static constexpr OperationType DISTRIBUTE =
    Operation_OperationType_DISTRIBUTE;
  static constexpr OperationType RETURN =
    Operation_OperationType_RETURN;
  static constexpr OperationType FINISH =
    Operation_OperationType_FINISH;
  static constexpr OperationType COMPUTE =
    Operation_OperationType_COMPUTE;
  static inline bool OperationType_IsValid(int value) {
    return Operation_OperationType_IsValid(value);
  }
  static constexpr OperationType OperationType_MIN =
    Operation_OperationType_OperationType_MIN;
  static constexpr OperationType OperationType_MAX =
    Operation_OperationType_OperationType_MAX;
  static constexpr int OperationType_ARRAYSIZE =
    Operation_OperationType_OperationType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  OperationType_descriptor() {
    return Operation_OperationType_descriptor();
  }
  template<typename T>
  static inline const std::string& OperationType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, OperationType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function OperationType_Name.");
    return Operation_OperationType_Name(enum_t_value);
  }
  static inline bool OperationType_Parse(const std::string& name,
      OperationType* value) {
    return Operation_OperationType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTaskFieldNumber = 5,
    kResultFieldNumber = 6,
    kIpFieldNumber = 3,
    kOperationFieldNumber = 1,
    kPortFieldNumber = 2,
  };
  // repeated .dos.Operation.DistributeTask task = 5;
  int task_size() const;
  private:
  int _internal_task_size() const;
  public:
  void clear_task();
  ::dos::Operation_DistributeTask* mutable_task(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dos::Operation_DistributeTask >*
      mutable_task();
  private:
  const ::dos::Operation_DistributeTask& _internal_task(int index) const;
  ::dos::Operation_DistributeTask* _internal_add_task();
  public:
  const ::dos::Operation_DistributeTask& task(int index) const;
  ::dos::Operation_DistributeTask* add_task();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dos::Operation_DistributeTask >&
      task() const;

  // repeated .dos.Operation.Result result = 6;
  int result_size() const;
  private:
  int _internal_result_size() const;
  public:
  void clear_result();
  ::dos::Operation_Result* mutable_result(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dos::Operation_Result >*
      mutable_result();
  private:
  const ::dos::Operation_Result& _internal_result(int index) const;
  ::dos::Operation_Result* _internal_add_result();
  public:
  const ::dos::Operation_Result& result(int index) const;
  ::dos::Operation_Result* add_result();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dos::Operation_Result >&
      result() const;

  // optional string ip = 3;
  bool has_ip() const;
  private:
  bool _internal_has_ip() const;
  public:
  void clear_ip();
  const std::string& ip() const;
  void set_ip(const std::string& value);
  void set_ip(std::string&& value);
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  std::string* mutable_ip();
  std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  private:
  const std::string& _internal_ip() const;
  void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // required .dos.Operation.OperationType operation = 1 [default = QUERY];
  bool has_operation() const;
  private:
  bool _internal_has_operation() const;
  public:
  void clear_operation();
  ::dos::Operation_OperationType operation() const;
  void set_operation(::dos::Operation_OperationType value);
  private:
  ::dos::Operation_OperationType _internal_operation() const;
  void _internal_set_operation(::dos::Operation_OperationType value);
  public:

  // optional uint32 port = 2;
  bool has_port() const;
  private:
  bool _internal_has_port() const;
  public:
  void clear_port();
  ::PROTOBUF_NAMESPACE_ID::uint32 port() const;
  void set_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_port() const;
  void _internal_set_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:dos.Operation)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dos::Operation_DistributeTask > task_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dos::Operation_Result > result_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  int operation_;
  ::PROTOBUF_NAMESPACE_ID::uint32 port_;
  friend struct ::TableStruct_mini_5fdos_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Operation_DistributeTask

// required string operation_num_type = 1;
inline bool Operation_DistributeTask::_internal_has_operation_num_type() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Operation_DistributeTask::has_operation_num_type() const {
  return _internal_has_operation_num_type();
}
inline void Operation_DistributeTask::clear_operation_num_type() {
  operation_num_type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Operation_DistributeTask::operation_num_type() const {
  // @@protoc_insertion_point(field_get:dos.Operation.DistributeTask.operation_num_type)
  return _internal_operation_num_type();
}
inline void Operation_DistributeTask::set_operation_num_type(const std::string& value) {
  _internal_set_operation_num_type(value);
  // @@protoc_insertion_point(field_set:dos.Operation.DistributeTask.operation_num_type)
}
inline std::string* Operation_DistributeTask::mutable_operation_num_type() {
  // @@protoc_insertion_point(field_mutable:dos.Operation.DistributeTask.operation_num_type)
  return _internal_mutable_operation_num_type();
}
inline const std::string& Operation_DistributeTask::_internal_operation_num_type() const {
  return operation_num_type_.GetNoArena();
}
inline void Operation_DistributeTask::_internal_set_operation_num_type(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  operation_num_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Operation_DistributeTask::set_operation_num_type(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  operation_num_type_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dos.Operation.DistributeTask.operation_num_type)
}
inline void Operation_DistributeTask::set_operation_num_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  operation_num_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dos.Operation.DistributeTask.operation_num_type)
}
inline void Operation_DistributeTask::set_operation_num_type(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  operation_num_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dos.Operation.DistributeTask.operation_num_type)
}
inline std::string* Operation_DistributeTask::_internal_mutable_operation_num_type() {
  _has_bits_[0] |= 0x00000001u;
  return operation_num_type_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Operation_DistributeTask::release_operation_num_type() {
  // @@protoc_insertion_point(field_release:dos.Operation.DistributeTask.operation_num_type)
  if (!_internal_has_operation_num_type()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return operation_num_type_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Operation_DistributeTask::set_allocated_operation_num_type(std::string* operation_num_type) {
  if (operation_num_type != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  operation_num_type_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), operation_num_type);
  // @@protoc_insertion_point(field_set_allocated:dos.Operation.DistributeTask.operation_num_type)
}

// required string operation_num_one = 2;
inline bool Operation_DistributeTask::_internal_has_operation_num_one() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Operation_DistributeTask::has_operation_num_one() const {
  return _internal_has_operation_num_one();
}
inline void Operation_DistributeTask::clear_operation_num_one() {
  operation_num_one_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Operation_DistributeTask::operation_num_one() const {
  // @@protoc_insertion_point(field_get:dos.Operation.DistributeTask.operation_num_one)
  return _internal_operation_num_one();
}
inline void Operation_DistributeTask::set_operation_num_one(const std::string& value) {
  _internal_set_operation_num_one(value);
  // @@protoc_insertion_point(field_set:dos.Operation.DistributeTask.operation_num_one)
}
inline std::string* Operation_DistributeTask::mutable_operation_num_one() {
  // @@protoc_insertion_point(field_mutable:dos.Operation.DistributeTask.operation_num_one)
  return _internal_mutable_operation_num_one();
}
inline const std::string& Operation_DistributeTask::_internal_operation_num_one() const {
  return operation_num_one_.GetNoArena();
}
inline void Operation_DistributeTask::_internal_set_operation_num_one(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  operation_num_one_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Operation_DistributeTask::set_operation_num_one(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  operation_num_one_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dos.Operation.DistributeTask.operation_num_one)
}
inline void Operation_DistributeTask::set_operation_num_one(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  operation_num_one_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dos.Operation.DistributeTask.operation_num_one)
}
inline void Operation_DistributeTask::set_operation_num_one(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  operation_num_one_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dos.Operation.DistributeTask.operation_num_one)
}
inline std::string* Operation_DistributeTask::_internal_mutable_operation_num_one() {
  _has_bits_[0] |= 0x00000002u;
  return operation_num_one_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Operation_DistributeTask::release_operation_num_one() {
  // @@protoc_insertion_point(field_release:dos.Operation.DistributeTask.operation_num_one)
  if (!_internal_has_operation_num_one()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return operation_num_one_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Operation_DistributeTask::set_allocated_operation_num_one(std::string* operation_num_one) {
  if (operation_num_one != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  operation_num_one_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), operation_num_one);
  // @@protoc_insertion_point(field_set_allocated:dos.Operation.DistributeTask.operation_num_one)
}

// required string operation_num_two = 3;
inline bool Operation_DistributeTask::_internal_has_operation_num_two() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Operation_DistributeTask::has_operation_num_two() const {
  return _internal_has_operation_num_two();
}
inline void Operation_DistributeTask::clear_operation_num_two() {
  operation_num_two_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& Operation_DistributeTask::operation_num_two() const {
  // @@protoc_insertion_point(field_get:dos.Operation.DistributeTask.operation_num_two)
  return _internal_operation_num_two();
}
inline void Operation_DistributeTask::set_operation_num_two(const std::string& value) {
  _internal_set_operation_num_two(value);
  // @@protoc_insertion_point(field_set:dos.Operation.DistributeTask.operation_num_two)
}
inline std::string* Operation_DistributeTask::mutable_operation_num_two() {
  // @@protoc_insertion_point(field_mutable:dos.Operation.DistributeTask.operation_num_two)
  return _internal_mutable_operation_num_two();
}
inline const std::string& Operation_DistributeTask::_internal_operation_num_two() const {
  return operation_num_two_.GetNoArena();
}
inline void Operation_DistributeTask::_internal_set_operation_num_two(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  operation_num_two_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Operation_DistributeTask::set_operation_num_two(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  operation_num_two_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dos.Operation.DistributeTask.operation_num_two)
}
inline void Operation_DistributeTask::set_operation_num_two(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  operation_num_two_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dos.Operation.DistributeTask.operation_num_two)
}
inline void Operation_DistributeTask::set_operation_num_two(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  operation_num_two_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dos.Operation.DistributeTask.operation_num_two)
}
inline std::string* Operation_DistributeTask::_internal_mutable_operation_num_two() {
  _has_bits_[0] |= 0x00000004u;
  return operation_num_two_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Operation_DistributeTask::release_operation_num_two() {
  // @@protoc_insertion_point(field_release:dos.Operation.DistributeTask.operation_num_two)
  if (!_internal_has_operation_num_two()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return operation_num_two_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Operation_DistributeTask::set_allocated_operation_num_two(std::string* operation_num_two) {
  if (operation_num_two != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  operation_num_two_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), operation_num_two);
  // @@protoc_insertion_point(field_set_allocated:dos.Operation.DistributeTask.operation_num_two)
}

// required string operation_label = 4;
inline bool Operation_DistributeTask::_internal_has_operation_label() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Operation_DistributeTask::has_operation_label() const {
  return _internal_has_operation_label();
}
inline void Operation_DistributeTask::clear_operation_label() {
  operation_label_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& Operation_DistributeTask::operation_label() const {
  // @@protoc_insertion_point(field_get:dos.Operation.DistributeTask.operation_label)
  return _internal_operation_label();
}
inline void Operation_DistributeTask::set_operation_label(const std::string& value) {
  _internal_set_operation_label(value);
  // @@protoc_insertion_point(field_set:dos.Operation.DistributeTask.operation_label)
}
inline std::string* Operation_DistributeTask::mutable_operation_label() {
  // @@protoc_insertion_point(field_mutable:dos.Operation.DistributeTask.operation_label)
  return _internal_mutable_operation_label();
}
inline const std::string& Operation_DistributeTask::_internal_operation_label() const {
  return operation_label_.GetNoArena();
}
inline void Operation_DistributeTask::_internal_set_operation_label(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  operation_label_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Operation_DistributeTask::set_operation_label(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  operation_label_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dos.Operation.DistributeTask.operation_label)
}
inline void Operation_DistributeTask::set_operation_label(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  operation_label_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dos.Operation.DistributeTask.operation_label)
}
inline void Operation_DistributeTask::set_operation_label(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  operation_label_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dos.Operation.DistributeTask.operation_label)
}
inline std::string* Operation_DistributeTask::_internal_mutable_operation_label() {
  _has_bits_[0] |= 0x00000008u;
  return operation_label_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Operation_DistributeTask::release_operation_label() {
  // @@protoc_insertion_point(field_release:dos.Operation.DistributeTask.operation_label)
  if (!_internal_has_operation_label()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return operation_label_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Operation_DistributeTask::set_allocated_operation_label(std::string* operation_label) {
  if (operation_label != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  operation_label_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), operation_label);
  // @@protoc_insertion_point(field_set_allocated:dos.Operation.DistributeTask.operation_label)
}

// -------------------------------------------------------------------

// Operation_Result

// required string result_type = 1;
inline bool Operation_Result::_internal_has_result_type() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Operation_Result::has_result_type() const {
  return _internal_has_result_type();
}
inline void Operation_Result::clear_result_type() {
  result_type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Operation_Result::result_type() const {
  // @@protoc_insertion_point(field_get:dos.Operation.Result.result_type)
  return _internal_result_type();
}
inline void Operation_Result::set_result_type(const std::string& value) {
  _internal_set_result_type(value);
  // @@protoc_insertion_point(field_set:dos.Operation.Result.result_type)
}
inline std::string* Operation_Result::mutable_result_type() {
  // @@protoc_insertion_point(field_mutable:dos.Operation.Result.result_type)
  return _internal_mutable_result_type();
}
inline const std::string& Operation_Result::_internal_result_type() const {
  return result_type_.GetNoArena();
}
inline void Operation_Result::_internal_set_result_type(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  result_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Operation_Result::set_result_type(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  result_type_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dos.Operation.Result.result_type)
}
inline void Operation_Result::set_result_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  result_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dos.Operation.Result.result_type)
}
inline void Operation_Result::set_result_type(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  result_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dos.Operation.Result.result_type)
}
inline std::string* Operation_Result::_internal_mutable_result_type() {
  _has_bits_[0] |= 0x00000001u;
  return result_type_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Operation_Result::release_result_type() {
  // @@protoc_insertion_point(field_release:dos.Operation.Result.result_type)
  if (!_internal_has_result_type()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return result_type_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Operation_Result::set_allocated_result_type(std::string* result_type) {
  if (result_type != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  result_type_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), result_type);
  // @@protoc_insertion_point(field_set_allocated:dos.Operation.Result.result_type)
}

// required string result_value = 2;
inline bool Operation_Result::_internal_has_result_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Operation_Result::has_result_value() const {
  return _internal_has_result_value();
}
inline void Operation_Result::clear_result_value() {
  result_value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Operation_Result::result_value() const {
  // @@protoc_insertion_point(field_get:dos.Operation.Result.result_value)
  return _internal_result_value();
}
inline void Operation_Result::set_result_value(const std::string& value) {
  _internal_set_result_value(value);
  // @@protoc_insertion_point(field_set:dos.Operation.Result.result_value)
}
inline std::string* Operation_Result::mutable_result_value() {
  // @@protoc_insertion_point(field_mutable:dos.Operation.Result.result_value)
  return _internal_mutable_result_value();
}
inline const std::string& Operation_Result::_internal_result_value() const {
  return result_value_.GetNoArena();
}
inline void Operation_Result::_internal_set_result_value(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  result_value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Operation_Result::set_result_value(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  result_value_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dos.Operation.Result.result_value)
}
inline void Operation_Result::set_result_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  result_value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dos.Operation.Result.result_value)
}
inline void Operation_Result::set_result_value(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  result_value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dos.Operation.Result.result_value)
}
inline std::string* Operation_Result::_internal_mutable_result_value() {
  _has_bits_[0] |= 0x00000002u;
  return result_value_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Operation_Result::release_result_value() {
  // @@protoc_insertion_point(field_release:dos.Operation.Result.result_value)
  if (!_internal_has_result_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return result_value_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Operation_Result::set_allocated_result_value(std::string* result_value) {
  if (result_value != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  result_value_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), result_value);
  // @@protoc_insertion_point(field_set_allocated:dos.Operation.Result.result_value)
}

// -------------------------------------------------------------------

// Operation

// required .dos.Operation.OperationType operation = 1 [default = QUERY];
inline bool Operation::_internal_has_operation() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Operation::has_operation() const {
  return _internal_has_operation();
}
inline void Operation::clear_operation() {
  operation_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::dos::Operation_OperationType Operation::_internal_operation() const {
  return static_cast< ::dos::Operation_OperationType >(operation_);
}
inline ::dos::Operation_OperationType Operation::operation() const {
  // @@protoc_insertion_point(field_get:dos.Operation.operation)
  return _internal_operation();
}
inline void Operation::_internal_set_operation(::dos::Operation_OperationType value) {
  assert(::dos::Operation_OperationType_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  operation_ = value;
}
inline void Operation::set_operation(::dos::Operation_OperationType value) {
  _internal_set_operation(value);
  // @@protoc_insertion_point(field_set:dos.Operation.operation)
}

// optional uint32 port = 2;
inline bool Operation::_internal_has_port() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Operation::has_port() const {
  return _internal_has_port();
}
inline void Operation::clear_port() {
  port_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Operation::_internal_port() const {
  return port_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Operation::port() const {
  // @@protoc_insertion_point(field_get:dos.Operation.port)
  return _internal_port();
}
inline void Operation::_internal_set_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  port_ = value;
}
inline void Operation::set_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:dos.Operation.port)
}

// optional string ip = 3;
inline bool Operation::_internal_has_ip() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Operation::has_ip() const {
  return _internal_has_ip();
}
inline void Operation::clear_ip() {
  ip_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Operation::ip() const {
  // @@protoc_insertion_point(field_get:dos.Operation.ip)
  return _internal_ip();
}
inline void Operation::set_ip(const std::string& value) {
  _internal_set_ip(value);
  // @@protoc_insertion_point(field_set:dos.Operation.ip)
}
inline std::string* Operation::mutable_ip() {
  // @@protoc_insertion_point(field_mutable:dos.Operation.ip)
  return _internal_mutable_ip();
}
inline const std::string& Operation::_internal_ip() const {
  return ip_.GetNoArena();
}
inline void Operation::_internal_set_ip(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Operation::set_ip(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  ip_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dos.Operation.ip)
}
inline void Operation::set_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dos.Operation.ip)
}
inline void Operation::set_ip(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dos.Operation.ip)
}
inline std::string* Operation::_internal_mutable_ip() {
  _has_bits_[0] |= 0x00000001u;
  return ip_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Operation::release_ip() {
  // @@protoc_insertion_point(field_release:dos.Operation.ip)
  if (!_internal_has_ip()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return ip_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Operation::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  ip_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:dos.Operation.ip)
}

// repeated .dos.Operation.DistributeTask task = 5;
inline int Operation::_internal_task_size() const {
  return task_.size();
}
inline int Operation::task_size() const {
  return _internal_task_size();
}
inline void Operation::clear_task() {
  task_.Clear();
}
inline ::dos::Operation_DistributeTask* Operation::mutable_task(int index) {
  // @@protoc_insertion_point(field_mutable:dos.Operation.task)
  return task_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dos::Operation_DistributeTask >*
Operation::mutable_task() {
  // @@protoc_insertion_point(field_mutable_list:dos.Operation.task)
  return &task_;
}
inline const ::dos::Operation_DistributeTask& Operation::_internal_task(int index) const {
  return task_.Get(index);
}
inline const ::dos::Operation_DistributeTask& Operation::task(int index) const {
  // @@protoc_insertion_point(field_get:dos.Operation.task)
  return _internal_task(index);
}
inline ::dos::Operation_DistributeTask* Operation::_internal_add_task() {
  return task_.Add();
}
inline ::dos::Operation_DistributeTask* Operation::add_task() {
  // @@protoc_insertion_point(field_add:dos.Operation.task)
  return _internal_add_task();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dos::Operation_DistributeTask >&
Operation::task() const {
  // @@protoc_insertion_point(field_list:dos.Operation.task)
  return task_;
}

// repeated .dos.Operation.Result result = 6;
inline int Operation::_internal_result_size() const {
  return result_.size();
}
inline int Operation::result_size() const {
  return _internal_result_size();
}
inline void Operation::clear_result() {
  result_.Clear();
}
inline ::dos::Operation_Result* Operation::mutable_result(int index) {
  // @@protoc_insertion_point(field_mutable:dos.Operation.result)
  return result_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dos::Operation_Result >*
Operation::mutable_result() {
  // @@protoc_insertion_point(field_mutable_list:dos.Operation.result)
  return &result_;
}
inline const ::dos::Operation_Result& Operation::_internal_result(int index) const {
  return result_.Get(index);
}
inline const ::dos::Operation_Result& Operation::result(int index) const {
  // @@protoc_insertion_point(field_get:dos.Operation.result)
  return _internal_result(index);
}
inline ::dos::Operation_Result* Operation::_internal_add_result() {
  return result_.Add();
}
inline ::dos::Operation_Result* Operation::add_result() {
  // @@protoc_insertion_point(field_add:dos.Operation.result)
  return _internal_add_result();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dos::Operation_Result >&
Operation::result() const {
  // @@protoc_insertion_point(field_list:dos.Operation.result)
  return result_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace dos

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::dos::Operation_OperationType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::dos::Operation_OperationType>() {
  return ::dos::Operation_OperationType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_mini_5fdos_2eproto
